package com.example.ecommerce.model;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

import java.util.ArrayList;

@Entity(tableName = "orders", foreignKeys = {
        @ForeignKey(entity = Customer.class, parentColumns = "customer_id", childColumns = "customer_id", onDelete = ForeignKey.CASCADE),
        @ForeignKey(entity = Discount.class, parentColumns = "discount_id", childColumns = "discount_id", onDelete = ForeignKey.SET_NULL)
})
public class Order {

    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "order_id")
    private int orderId;

    @ColumnInfo(name = "order_date")
    private final String orderDate;

    @ColumnInfo(name = "order_total", defaultValue = "0.0", typeAffinity = ColumnInfo.REAL)
    private final double orderTotal;

    @ColumnInfo(name = "discount_id", typeAffinity = ColumnInfo.INTEGER)
    private final int discountId;

    @ColumnInfo(name = "discount_amount", defaultValue = "0.0", typeAffinity = ColumnInfo.REAL)
    private final double discountAmount;

    @ColumnInfo(name = "tax_and_charges", defaultValue = "0.0", typeAffinity = ColumnInfo.REAL)
    private final double taxAndCharges;

    @ColumnInfo(name = "sub_total", defaultValue = "0.0", typeAffinity = ColumnInfo.REAL)
    private final double subTotal;

    @ColumnInfo(name = "paid_amount", defaultValue = "0.0", typeAffinity = ColumnInfo.REAL)
    private double paidAmount;

    @ColumnInfo(name = "due_amount", defaultValue = "0.0", typeAffinity = ColumnInfo.REAL)
    private double dueAmount;

    @ColumnInfo(name = "customer_id", typeAffinity = ColumnInfo.INTEGER)
    private final int customerId;

    @ColumnInfo(name = "order_status")
    private String orderStatus;

    @Ignore
    private final ArrayList<OrderItem> orderItems;

    /**
     * Constructor for Room database.
     * Initializes all final fields and sets mutable fields like paidAmount and dueAmount to default values.
     *
     * @param orderId        the order ID (auto-generated by Room)
     * @param orderDate      the date of the order
     * @param orderTotal     total price of the order
     * @param discountId     ID of the discount applied to the order
     * @param discountAmount amount of discount applied to the order
     * @param taxAndCharges  tax and other additional charges for the order
     * @param subTotal       subtotal of the order
     * @param paidAmount     amount paid by the customer
     * @param dueAmount      amount yet to be paid by the customer
     * @param customerId     customer associated with the order
     * @param orderStatus    current status of the order
     */
    public Order(int orderId, String orderDate, double orderTotal, int discountId, double discountAmount,
                 double taxAndCharges, double subTotal, double paidAmount, double dueAmount,
                 int customerId, String orderStatus) {
        this.orderId = orderId;
        this.orderDate = orderDate;
        this.orderTotal = orderTotal;
        this.discountId = discountId;
        this.discountAmount = discountAmount;
        this.taxAndCharges = taxAndCharges;
        this.subTotal = subTotal;
        this.paidAmount = paidAmount;
        this.dueAmount = dueAmount;
        this.customerId = customerId;
        this.orderStatus = orderStatus;
        this.orderItems = new ArrayList<>();
    }

    /**
     * Builder pattern to create instances of Order.
     * This ensures that required fields are set during instantiation, and additional fields can be set optionally.
     */
    @Ignore
    private Order(OrderBuilder builder) {
        this.orderId = builder.orderId;
        this.orderDate = builder.orderDate;
        this.orderTotal = builder.orderTotal;
        this.discountId = builder.discountId;
        this.discountAmount = builder.discountAmount;
        this.taxAndCharges = builder.taxAndCharges;
        this.subTotal = builder.subTotal;
        this.paidAmount = builder.paidAmount;
        this.dueAmount = builder.dueAmount;
        this.customerId = builder.customerId;
        this.orderStatus = builder.orderStatus;
        this.orderItems = builder.orderItems;
    }

    // Builder class for Order
    public static class OrderBuilder {
        private int orderId;
        private final String orderDate;
        private final double orderTotal;
        private int discountId = 0;  // Defaults to no discount
        private double discountAmount = 0.0;
        private double taxAndCharges = 0.0;
        private double subTotal = 0.0;
        private double paidAmount = 0.0;
        private double dueAmount = 0.0;
        private int customerId;
        private String orderStatus;
        private ArrayList<OrderItem> orderItems = new ArrayList<>();

        /**
         * Constructor for the builder pattern, initializes required fields.
         *
         * @param orderDate    the date of the order
         * @param orderTotal   total price of the order
         * @param orderStatus  status of the order
         * @param taxAndCharges  tax and other charges applied to the order
         * @param subTotal     subtotal of the order
         */
        public OrderBuilder(String orderDate, double orderTotal, String orderStatus, double taxAndCharges, double subTotal) {
            this.orderDate = orderDate;
            this.orderTotal = orderTotal;
            this.orderStatus = orderStatus;
            this.taxAndCharges = taxAndCharges;
            this.subTotal = subTotal;
        }

        // Optional setters
        public OrderBuilder withOrderId(int orderId) {
            this.orderId = orderId;
            return this;
        }

        public OrderBuilder withDiscount(int discountId, double discountAmount) {
            this.discountId = discountId;
            this.discountAmount = discountAmount;
            return this;
        }

        public OrderBuilder withPayment(double paidAmount, double dueAmount) {
            this.paidAmount = paidAmount;
            this.dueAmount = dueAmount;
            return this;
        }

        public OrderBuilder withCustomerId(int customerId) {
            this.customerId = customerId;
            return this;
        }

        public OrderBuilder withOrderItems(ArrayList<OrderItem> orderItems) {
            this.orderItems = orderItems;
            return this;
        }

        public Order build() {
            return new Order(this);
        }
    }

    // Getters
    public int getOrderId() {
        return orderId;
    }

    public String getOrderDate() {
        return orderDate;
    }

    public double getOrderTotal() {
        return orderTotal;
    }

    public int getDiscountId() {
        return discountId;
    }

    public double getDiscountAmount() {
        return discountAmount;
    }

    public double getTaxAndCharges() {
        return taxAndCharges;
    }

    public double getSubTotal() {
        return subTotal;
    }

    public double getPaidAmount() {
        return paidAmount;
    }

    public double getDueAmount() {
        return dueAmount;
    }

    public int getCustomerId() {
        return customerId;
    }

    public String getOrderStatus() {
        return orderStatus;
    }

    public ArrayList<OrderItem> getOrderItems() {
        return orderItems;
    }

    // Setters for mutable fields
    public void setPaidAmount(double paidAmount) {
        this.paidAmount = paidAmount;
    }

    public void setDueAmount(double dueAmount) {
        this.dueAmount = dueAmount;
    }

    public void setOrderStatus(String orderStatus) {
        this.orderStatus = orderStatus;
    }

    public void setOrderId(int orderId) {
        this.orderId = orderId;
    }
}
